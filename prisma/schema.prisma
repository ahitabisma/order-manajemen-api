// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ROLE ADA ADMIN DAN CUSTOMER
enum Role {
  ADMIN
  CUSTOMER
}

// ENUM ORDER STATUS
enum OrderStatus {
  PENDING
  COMPLETED
  CANCELED
}

// TABEL USER
model User {
  id       Int     @id @default(autoincrement())
  name     String
  email    String  @unique
  password String
  photo    String?
  role     Role    @default(CUSTOMER)

  refreshTokens RefreshToken[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]

  @@map("users")
}

// TABEL REFRESH TOKEN
// Digunakan untuk mengeluarkan akses token baru
// Refresh token ini akan disimpan di database
model RefreshToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  revoked   Boolean  @default(false)

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("refresh_tokens")
}

// TABEL PRODUCT
// Menyimpan data produk yang tersedia
model Product {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  price       Decimal @db.Decimal(10, 2)
  stock       Int     @default(0)

  images ProductImage[]

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  OrderItem OrderItem[]

  @@map("products")
}

// TABEL PRODUCT IMAGE
// Menyimpan gambar produk
model ProductImage {
  id        Int     @id @default(autoincrement())
  productId Int
  url       String

  product Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product_images")
}

// TABEL ORDER
// Menyimpan data pesanan yang dibuat oleh customer
model Order {
  id          Int         @id @default(autoincrement())
  userId      Int
  totalAmount Decimal     @db.Decimal(10, 2)
  status      OrderStatus @default(PENDING)

  user  User        @relation(fields: [userId], references: [id])
  items OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orders")
}

// TABEL ORDER ITEM
// Menyimpan detail item dalam setiap pesanan
model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Decimal @db.Decimal(10, 2)

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_items")
}
